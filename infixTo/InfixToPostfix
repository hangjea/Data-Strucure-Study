#define		_CRT_SECURE_NO_WARNINGS
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "ListBaseStack.h"

int GetOpPrec(char op)
{
	switch(op)
	{
	case '*':
	case '/':
		return 5; //우선순위 아무숫자나 상관없음
	case '+':
	case '-':
		return 3; //우선순위
	case '(':
		return 1; //우선순위
	} //)가 없는 이유는 메세지만 취하고 버리는거기 때문에 굳이 우선순위에 둘 필요가 없음

	return -1;   // 등록되지 않은 연산자
}

int WhoPrecOp(char op1, char op2) // 우선순위 비교하는 함수
{
	int op1Prec = GetOpPrec(op1); //우선순위 op1에 저장
	int op2Prec = GetOpPrec(op2); //우선순위 op2에 저장

	if(op1Prec > op2Prec)
		return 1;
	else if(op1Prec < op2Prec)
		return -1;
	else
		return 0;
}

void ConvToRPNExp(char exp[])
{
	Stack stack;
	int expLen = strlen(exp); //문자열의 최대 길이 할당받음
	char * convExp = (char*)malloc(expLen+1); //변환된 수식을 담을 공간 생성

	int i, idx=0;
	char tok, popOp;
	
	memset(convExp, 0, sizeof(char)*expLen+1); //convExp을 0으로 초기화하고 배열의 길이+1만큼 메모리 크기 지정
	StackInit(&stack); //스택 초기화하는 함수

	for(i=0; i<expLen; i++)
	{
		tok = exp[i]; //exp로 저장된 수식 하나씩 저장
		if(isdigit(tok)) //isdgit 숫자를 판단하는 함수
		{
			convExp[idx++] = tok; //46번째에 초기화해서 배열상태인듯함. idx는 실행되고 나서 1증가 현재 배열에 tok에 저장된 수식 하나 증가
		}
		else //숫자가 아니라면
		{
			switch(tok)
			{
			case '(': // ( 연산자 라면
				SPush(&stack, tok); //스택에 문자 하나 증가
				break;

			case ')': // )연산자라면
				while(1)
				{
					popOp = SPop(&stack);//스택에 연산자를 꺼내서
					if(popOp == '(') // ( 연산자를 만날때까지
						break;
					convExp[idx++] = popOp; // 저장되어 있는 수식들을 배열 convExp에 저장한다
				}
				break;

			case '+': case '-': 
			case '*': case '/':
				while(!SIsEmpty(&stack) &&  //스택이 비어있으면 1을 반환하는 함수
						WhoPrecOp(SPeek(&stack), tok) >= 0) //SPeek로 현재 스택에 있는 수식이랑 tok에 저장되어있는 수식를 우선순위 비교해서 
					convExp[idx++] = SPop(&stack);//여기에 넣음
				//while 문을 빠져나갔다는건 tok에 저장된 연산자가 들어갈 스택을 찾았다는 뜻
				SPush(&stack, tok);
				break;
			}
		}
	}

	while(!SIsEmpty(&stack)) //스택에 남아있는 모든 연산자를 
		convExp[idx++] = SPop(&stack); //convExp로 이동시킨다
	//SPop는 꺼내고 그 해당되는 스택 삭제하는
	strcpy(exp, convExp); //convExp에 저장된 배열들 exp로 복사해서 넣기
	free(convExp);// convExp 메모리 삭제
}
