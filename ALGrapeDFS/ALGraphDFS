#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ALGraphDFS.h"
#include "DLinkedList.h"
#include "ArrayBaseStack.h"

int WhoIsPrecede(int data1, int data2);

// 그래프의 초기화
void GraphInit(ALGraph * pg, int nv)
{
	int i;	

	pg->adjList = (List*)malloc(sizeof(List)*nv);
	pg->numV = nv;
	pg->numE = 0;     // 초기의 간선 수는 0개

	for(i=0; i<nv; i++)
	{
		ListInit(&(pg->adjList[i]));
		SetSortRule(&(pg->adjList[i]), WhoIsPrecede); 
	}

	// 탐색 정보 등록을 위한 공간의 할당 및 초기화
	pg->visitInfo= (int *)malloc(sizeof(int) * pg->numV);
	//배열의 모든 요소를 0으로 초기화
	memset(pg->visitInfo, 0, sizeof(int) * pg->numV);
}

// 그래프의 리소스 해제
void GraphDestroy(ALGraph * pg)
{
	if(pg->adjList != NULL)
		free(pg->adjList);

	if(pg->visitInfo != NULL)
		free(pg->visitInfo);
}

// 간선의 추가
void AddEdge(ALGraph * pg, int fromV, int toV)
{
	LInsert(&(pg->adjList[fromV]), toV);
	LInsert(&(pg->adjList[toV]), fromV);
	pg->numE += 1;
}

// 유틸리티 함수: 간선의 정보 출력
void ShowGraphEdgeInfo(ALGraph * pg)
{
	int i;
	int vx;

	for(i=0; i<pg->numV; i++)
	{
		printf("%c와 연결된 정점: ", i + 65);
		
		if(LFirst(&(pg->adjList[i]), &vx))
		{
			printf("%c ", vx + 65);
			
			while(LNext(&(pg->adjList[i]), &vx))
				printf("%c ", vx + 65);
		}
		printf("\n");
	}
}

int WhoIsPrecede(int data1, int data2)
{
	if(data1 < data2)
		return 0;
	else
		return 1;
}


int VisitVertex(ALGraph * pg, int visitV)
{
	if(pg->visitInfo[visitV] == 0) //첫방문일때 참
	{
		pg->visitInfo[visitV] = 1; //방문했기때문에 있다고 1을 저장
		printf("%c ", visitV + 65);     // 방문 정점 출력
		return TRUE;
	}
	
	return FALSE;
}

// Depth First Search: 정점의 정보 출력
void DFShowGraphVertex(ALGraph * pg, int startV)
{
	Stack stack;
	int visitV = startV;
	int nextV;

	// DFS를 위한 스택의 초기화
	StackInit(&stack);

	VisitVertex(pg, visitV);    // 시작 정점 방문
	SPush(&stack, visitV); //시작 정점의 정보를 스택으로 보냄
	//visitV에 담긴 정점과 연결된 정점의 방문을 시도하는 while문 (모든 정점 방문이 이뤄진다)
	while(LFirst(&(pg->adjList[visitV]), &nextV) == TRUE)
	{
		//LFirst 함수 호출을 해서 visitV에 연결된 정점 하나를 얻어서 nextv에 저장됨
		//visitv와 연결된 정점의 정보가 nextV에 담긴 상태에서 밑에 진행
		int visitFlag = FALSE;

		if(VisitVertex(pg, nextV) == TRUE) //방문에 성공했다면
		{
			SPush(&stack, visitV);//visitv에 담긴 정보를 스택에 넣음
			visitV = nextV; //nextv에 담긴 정보를 visiv에 담고서
			visitFlag = TRUE; // while 문 다시 시작함 다른 정점을 방문하기 위해
		}//LFirst 함수 호출을 통해서 얻은 정점의 방문에 실패한 경우 else 실행
		else
		{//다른 정점 찾기
			while(LNext(&(pg->adjList[visitV]), &nextV) == TRUE)
			{//위의 LNext 함수 호출을  통해서 visiv에 연결된 정점 하나 얻고 그걸 nextv에 저장
				if(VisitVertex(pg, nextV) == TRUE) //nextv에 담긴 정점의 정보를 가지고 방문 시도
				{
					SPush(&stack, visitV); //스택에 정보 넣기
					visitV = nextV;//visiv에 nextv에 담긴 정보 넣고
					visitFlag = TRUE; //성공적으로 방문했으니 트루
					break; //반복문 탈출
				}
			}
		}
		
		if(visitFlag == FALSE)//추가로 방문한 정점이 없었다면
		{
			if(SIsEmpty(&stack) == TRUE)    // 스택이 비면 DFS종료
				break;
			else
				visitV = SPop(&stack); //다른 길 찾기 SPop는 스택에서 하나 빼는 함수
		}
	}

	// 탐색 정보 초기화
	memset(pg->visitInfo, 0, sizeof(int) * pg->numV);
}
