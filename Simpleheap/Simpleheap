#include "SimpleHeap.h"

void HeapInit(Heap * ph) //힙의 초기화
{
	ph->numOfData = 0;
}

int HIsEmpty(Heap * ph)//힙이 비었는지 확인해서 비었으면 1
{
	if(ph->numOfData == 0)
		return TRUE;
	else
		return FALSE;
}

int GetParentIDX(int idx) //부모 노드의 인덱스값 반환
{ 
	return idx/2; 
}

int GetLChildIDX(int idx)  //왼쪽 자식 노드의 인덱스값
{ 
	return idx*2; 
}

int GetRChildIDX(int idx) //오른쪽 자식 노드의 인덱스값
{ 
	return GetLChildIDX(idx)+1; 
}

int GetHiPriChildIDX(Heap * ph, int idx) //두개의 자식 노드중 높은 우선순위의 자식 노드 인덱스값 반환
{
	if(GetLChildIDX(idx) > ph->numOfData)    // 자식 노드가 없다면
		return 0;

	else if(GetLChildIDX(idx) == ph->numOfData)    // 왼쪽 자식 노드가 마지막 노드라면
		return GetLChildIDX(idx);
	else   // 왼쪽 자식 노드와 오른쪽 자식 노드의 우선순위를 비교
	{
		if(ph->heapArr[GetLChildIDX(idx)].pr //pr은 우선순위 담겨 있는 변수 
						> ph->heapArr[GetRChildIDX(idx)].pr) //각 배열의 우선순위를 비교해서 (우선 순위는 숫자가 낮아야해서)
			return GetRChildIDX(idx); //오른쪽이 높으면 오른쪽 반환
		else
			return GetLChildIDX(idx); //아니면 왼쪽 반환
	}
}

void HInsert(Heap * ph, HData data, Priority pr)
{
	int idx = ph->numOfData+1; //새 노드가 저장될 인덱스값을 idx에 저장
	HeapElem nelem = {pr, data};  //새 노드의 생성 및 초기화

	while(idx != 1) //새노드가 저장될 위치가 루트 노드 위치가 아니라면 while 문 반복
	{
		if (pr < (ph->heapArr[GetParentIDX(idx)].pr))//새 노드의 우선순위가 높다면
		{
			ph->heapArr[idx] = ph->heapArr[GetParentIDX(idx)]; // 부모 노드를 한 레벨 내림, 실제로 내림 
			idx = GetParentIDX(idx); // 새 노드를 한 레벨 올림, 실제로 올리진 않고 인덱스값만 갱신
		}
		else //새 노드의 우선순위가 높지 않다면
			break;
	}
	
	ph->heapArr[idx] = nelem; // 새 노드를 배열에 저장
	ph->numOfData += 1;
}

HData HDelete(Heap * ph)
{
	HData retData = (ph->heapArr[1]).data;    // 삭제할 데이터 임시 저장
	HeapElem lastElem = ph->heapArr[ph->numOfData]; //힙의 마지막 노드 저장
	// parentldx는 마지막 노드가 저장될 위치 정보가 담긴다
	int parentIdx = 1;    // 루트 노드의 Index
	int childIdx;
	//루트 노드의 우선순위가 높은 자식 노드를 시작으로 반복문 사적
	while(childIdx = GetHiPriChildIDX(ph, parentIdx))
	{
		if(lastElem.pr <= ph->heapArr[childIdx].pr) //마지막 노드랑 우선순위 비교
			break; //마지막 노드가 우선순위가 크면 탈출

		ph->heapArr[parentIdx] = ph->heapArr[childIdx]; //마지막 노드보다 우선순위가 높으니 비교대상 레벨을 한레벨 올림
		parentIdx = childIdx; //마지막 노드가 저장될 위치 정보를 한 레벨 다운
	} //반복문 탈출하면 parentIdx에 마지막 노드의 위치정보가 저장됨

	ph->heapArr[parentIdx] = lastElem; //마지막 노드 최종 저장
	ph->numOfData -= 1;
	return retData;
}
